??SELECTION SORT

#include <iostream>
#include <stdio.h>
#include <time.h>
using namespace std;
void swap(int *xp, int *yp)  
{  
    int temp = *xp;  
    *xp = *yp;  
    *yp = temp;  
}  
void selectionSort(int arr[], int n)  
{  
    int i, j, min_idx,count=0;  
    for (i = 0; i < n-1; i++)  
    {  
         min_idx = i;  
        for (j = i+1; j < n; j++)  
        {if (arr[j] < arr[min_idx])  
          {  min_idx = j; 
	count++; }}
		
        swap(&arr[min_idx], &arr[i]);  
    }  
	cout<<"number of comparisons is"<<count<<endl;
}  

int main(int argc, char **argv)
{ 
	int n,k,i,arr[10];
        clock_t start,end;
        start=clock();
	cout<<"enter the value of n";
	cin>>n;
	cout<<"enter the array";
	for(i=0;i<n;i++)
	  cin>>arr[i];
	cout<<"enter value of k";
	cin>>k;
	selectionSort(arr,n);
	cout<<"the element is"<<endl;
	cout<<arr[k-1];
	//for(i=0;i<n;i++)
	 //cout<<arr[i];
	 end=clock();
         double t=(double)(start-end)/double(CLOCKS_PER_SEC);
	cout<<"time is"<<t;
	return 0;
}
BUBBLE SORT


#include <iostream>
#include <stdio.h>
#include <time.h>
using namespace std;
void swap(int *xp, int *yp)  
{  
    int temp = *xp;  
    *xp = *yp;  
    *yp = temp;  
}  
  
void bubbleSort(int arr[], int n)  
{  
    int i, j,count=0;  
    for (i = 0; i < n-1; i++)     
    {for (j = 0; j < n-i-1; j++)  
        {if (arr[j] <arr[j+1])  
           { swap(&arr[j], &arr[j+1]); 
          count++;}
	 }}
	cout<<"count is"<<count;
}  

int main(int argc, char **argv)
{ 
	int n,k,i,arr[10];
	clock_t start,end;
	start=clock();
	cout<<"enter the value of n"<<endl;
	cin>>n;
	cout<<"enter the array"<<endl;
	for(i=0;i<n;i++)
	  cin>>arr[i];
	cout<<"enter value of k"<<endl;
	cin>>k;
	bubbleSort(arr,n);
	cout<<"the elements are "<<endl;
	for(i=0;i<k;i++)
	cout<<arr[i]<<endl;
	//for(i=0;i<n;i++)
	 //cout<<arr[i];
	 end=clock();
	 double t=(double)(start-end)/double(CLOCKS_PER_SEC);
	cout<<"time is"<<t;
	return 0;
}



merge sort

#include <iostream>
#include <stdio.h>
#include <time.h>
using namespace std;
void merge(int arr[], int l, int m, int r) 
{ 
    int i, j, k,count=0; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
    int L[n1], R[n2]; 
    for (i = 0; i < n1; i++) 
        L[i] = arr[l + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = arr[m + 1+ j]; 
    i = 0; 
    j = 0; 
    k = l; 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i]; 
            i++; 
        } 
        else
        { 
            arr[k] = R[j]; 
            j++; 
        } 
        k++;count++;
    } 
    while (i < n1) 
    { 
        arr[k] = L[i]; 
        i++; 
        k++; 
    } 
    while (j < n2) 
    { 
        arr[k] = R[j]; 
        j++; 
        k++; 
    } 
} 

void mergeSort(int arr[], int l, int r) 
{ 
    if (l < r) 
    { 

        int m = l+(r-l)/2; 
        mergeSort(arr, l, m); 
        mergeSort(arr, m+1, r); 
  
        merge(arr, l, m, r); 
    } 
} 
  
void printArray(int A[], int size) 
{ 
    int i; 
    for (i=0; i < size; i++) 
     cout<<A[i];
} 
  
int main() 
{ 
    //int arr[] = {12, 11, 13, 5, 6, 7}; 
   // int arr_size = sizeof(arr)/sizeof(arr[0]); 
    //printf("Given array is \n"); 
    //printArray(arr, arr_size); 
  int arr[10],n,i;
  cout<<"enter the value of n";
  cin>>n;
  cout<<"enter the elemnets";
  for(i=0;i<n;i++)
	  cin>>arr[i];
    mergeSort(arr, 0, n - 1); 
  
    cout<<"\nSorted array is \n"; 
    printArray(arr, n); 
    return 0; 
} 
